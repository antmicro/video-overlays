#!/bin/bash

PROJ_ROOT="$(dirname $(dirname $(realpath ${BASH_SOURCE[0]})))"

required_packages=(git cmake ninja-build gperf python3-dev ccache device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev build-essential)
missing_packages=()

for p in ${required_packages[@]}; do
    status=$(dpkg-query -W --showformat='${db:Status-Status}' "$p" 2>&1)
    if [[ $status == installed ]];then
        continue
    elif ! which $p >/dev/null; then
        missing_packages+=($p)
    fi
done

if [ ${#missing_packages[@]} -gt 0 ]; then
    echo "Missing packages:"
    echo "${missing_packages[@]}\n"
    echo -e "\e[0;31mWARNING:\e[0;33m Zephyr dependencies not satisfied\e[m"
    echo "Please follow official Zephyr's guide to install it:"
    echo -e "\thttps://docs.zephyrproject.org/latest/getting_started/index.html#install-dependencies"
fi

# Minimum required version for the main Zephyr dependencies
min_cmake_version="3.20.0"
min_python_version="3.6"
min_dtc_version="1.4.6"

# Check if minimum dependencies are satisfied
installed_cmake_version=$(cmake --version | head -n1 | cut -d" " -f3)
installed_python_version=$(python3 --version | head -n1 | cut -d" " -f2)
installed_dtc_version=$(dtc --version | head -n1 | cut -d" " -f3)

if ! [ "$(printf '%s\n' "$min_cmake_version" "$installed_cmake_version" | sort -V | head -n1)" = "$min_cmake_version" ]; then
    echo "You have installed CMake ${installed_cmake_version} when ${min_cmake_version} is required."
fi
if ! [ "$(printf '%s\n' "$min_python_version" "$installed_python_version" | sort -V | head -n1)" = "$min_python_version" ]; then
    echo "You have installed Python ${installed_python_version} when ${min_python_version} is required."
fi
if ! [ "$(printf '%s\n' "$min_dtc_version" "$installed_dtc_version" | sort -V | head -n1)" = "$min_dtc_version" ]; then
    echo "You have installed Devicetree compiler ${installed_dtc_version} when ${min_dtc_version} is required."
fi

# Check if Zephyr SDK is installed in any of default directories
zephyr_install_dirs=($HOME/zephyr-sdk-* $HOME/.local/zephyr-sdk-* $HOME/.local/opt/zephyr-sdk-* $HOME/bin/zephyr-sdk-* /opt/zephyr-sdk-* /usr/zephyr-sdk-* /usr/local/zephyr-sdk-*)
found_zephyr=0
for dir in ${zephyr_install_dirs[@]}; do
    if [ -e $dir ]; then
        found_zephyr=1
    fi
done

# If not, check if it's in custom directory
if [[ found_zephyr -eq 0 ]] && [[ -z "$ZEPHYR_SDK_INSTALL_DIR" ]]; then
    echo -e "\e[0;31mERROR:\e[0;33m Zephyr SDK not installed\e[m"
    echo "Please follow official Zephyr's guide to install it:"
    echo -e "\thttps://docs.zephyrproject.org/latest/getting_started/index.html"
    exit 1
fi

# Update submodules if app does not exist
if [[ -z "${PROJ_ROOT}/software/video-overlays-zephyr-app" ]]; then
    git submodule update --init
fi

# Initialize app workspace or update it
if [[ ! -e "${PROJ_ROOT}/software/zephyr" ]]; then
    west init -l software/video-overlays-zephyr-app
    pushd software
    west update
    echo "Zephyr workspace setup successful."
elif [[ -e "${PROJ_ROOT}/software/zephyr" ]]; then
    pushd software
    west update
    pushd video-overlays-zephyr-app
    git pull
    echo "Zephyr workspace updated successfuly."
fi
